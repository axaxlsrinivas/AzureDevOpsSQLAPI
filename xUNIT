using System.Threading.Tasks;
using Xunit;
using YourNamespace; // Replace with your actual namespace
using Microsoft.Maui.Controls;
using Microsoft.Maui.Dispatching;

namespace YourNamespace.Tests
{
    public class CustomContentViewTests
    {
        private async Task RunOnMainThreadAsync(Func<Task> action)
        {
            await MainThread.InvokeOnMainThreadAsync(action);
        }

        [Fact]
        public async Task CustomContentView_ShouldInitializeComponents()
        {
            await RunOnMainThreadAsync(async () =>
            {
                // Arrange
                var customContentView = new CustomContentView();

                // Act
                var image = customContentView.Content.FindByName<Image>("Image");
                var label = customContentView.Content.FindByName<Label>("Label");

                // Assert
                Assert.NotNull(image);
                Assert.NotNull(label);
                Assert.IsType<StackLayout>(customContentView.Content);
            });
        }

        [Fact]
        public async Task CustomContentView_ShouldSetLabelTextBindableProperty()
        {
            await RunOnMainThreadAsync(async () =>
            {
                // Arrange
                var customContentView = new CustomContentView();
                string testText = "Test Label";

                // Act
                customContentView.LabelText = testText;

                // Assert
                Assert.Equal(testText, customContentView.LabelText);
                var label = customContentView.Content.FindByName<Label>("Label");
                Assert.Equal(testText, label.Text);
            });
        }

        [Fact]
        public async Task CustomContentView_ShouldSetBackgroundColorBindableProperty()
        {
            await RunOnMainThreadAsync(async () =>
            {
                // Arrange
                var customContentView = new CustomContentView();
                Color testColor = Colors.Red;

                // Act
                customContentView.BackgroundColor = testColor;

                // Assert
                Assert.Equal(testColor, customContentView.BackgroundColor);
                Assert.Equal(testColor, customContentView.BackgroundColor);
            });
        }

        [Fact]
        public async Task CustomContentView_ShouldSetImageSourceBindableProperty()
        {
            await RunOnMainThreadAsync(async () =>
            {
                // Arrange
                var customContentView = new CustomContentView();
                string testImageSource = "test.png";

                // Act
                customContentView.ImageSource = ImageSource.FromFile(testImageSource);

                // Assert
                Assert.Equal(testImageSource, ((FileImageSource)customContentView.ImageSource).File);
                var image = customContentView.Content.FindByName<Image>("Image");
                Assert.Equal(testImageSource, ((FileImageSource)image.Source).File);
            });
        }
    }
}

========
[SetUp]
public void Setup()
{
    var app = new Application();
    var resources = new ResourceDictionary();
    resources.Add("LabelStyle", new Style(typeof(Label))
    {
        Setters =
        {
            new Setter { Property = Label.FontSizeProperty, Value = 20 },
            new Setter { Property = Label.TextColorProperty, Value = Colors.Black }
        }
    });
    app.Resources = resources;
    Application.Current = app;
}

=====
// CustomContentViewTests.cs
using System;
using Xunit;
using YourNamespace; // Replace with your actual namespace
using Microsoft.Maui.Controls;

namespace YourNamespace.Tests
{
    public class CustomContentViewTests
    {
        [Fact]
        public void CustomContentView_ShouldInitializeComponents()
        {
            // Arrange
            var customContentView = new CustomContentView();

            // Act
            var image = customContentView.Content.FindByName<Image>("Image");
            var label = customContentView.Content.FindByName<Label>("Label");

            // Assert
            Assert.NotNull(image);
            Assert.NotNull(label);
            Assert.IsType<StackLayout>(customContentView.Content);
        }

        [Fact]
        public void CustomContentView_ShouldSetLabelTextBindableProperty()
        {
            // Arrange
            var customContentView = new CustomContentView();
            string testText = "Test Label";

            // Act
            customContentView.LabelText = testText;

            // Assert
            Assert.Equal(testText, customContentView.LabelText);
            var label = customContentView.Content.FindByName<Label>("Label");
            Assert.Equal(testText, label.Text);
        }

        [Fact]
        public void CustomContentView_ShouldSetBackgroundColorBindableProperty()
        {
            // Arrange
            var customContentView = new CustomContentView();
            Color testColor = Colors.Red;

            // Act
            customContentView.BackgroundColor = testColor;

            // Assert
            Assert.Equal(testColor, customContentView.BackgroundColor);
            Assert.Equal(testColor, customContentView.BackgroundColor);
        }

        [Fact]
        public void CustomContentView_ShouldSetImageSourceBindableProperty()
        {
            // Arrange
            var customContentView = new CustomContentView();
            string testImageSource = "test.png";

            // Act
            customContentView.ImageSource = ImageSource.FromFile(testImageSource);

            // Assert
            Assert.Equal(testImageSource, ((FileImageSource)customContentView.ImageSource).File);
            var image = customContentView.Content.FindByName<Image>("Image");
            Assert.Equal(testImageSource, ((FileImageSource)image.Source).File);
        }
    }
}

======
using Xunit;
using Microsoft.Maui.Controls;
using MyApp;

public class MyContentViewTests
{
    [Fact]
    public void TextProperty_Should_Set_Label_Text()
    {
        // Arrange
        var contentView = new MyContentView();
        var expectedText = "Hello, World!";
        
        // Act
        contentView.TextProperty = expectedText;
        
        // Assert
        var label = (Label)contentView.Content;
        Assert.Equal(expectedText, label.Text);
    }
}


using Xunit;
using Microsoft.Maui.Controls;
using MyApp;

public class MyContentViewTests
{
    [Fact]
    public void BackgroundColorProperty_Should_Set_BoxView_Color()
    {
        // Arrange
        var contentView = new MyContentView();
        var expectedColor = Colors.Red; // Use appropriate Color instance
        
        // Act
        contentView.BackgroundColorProperty = expectedColor;
        
        // Assert
        var boxView = (BoxView)contentView.Content;
        Assert.Equal(expectedColor, boxView.Color);
    }
}


using Xunit;
using Microsoft.Maui.Controls;
using MyApp;

public class MyContentViewTests
{
    [Fact]
    public void ImageSourceProperty_Should_Set_Image_Source()
    {
        // Arrange
        var contentView = new MyContentView();
        var expectedImageSource = ImageSource.FromFile("example.png");
        
        // Act
        contentView.ImageSourceProperty = expectedImageSource;
        
        // Assert
        var image = (Image)contentView.Content;
        Assert.Equal(expectedImageSource, image.Source);
    }
}


======


using Xunit;
using Microsoft.Maui.Controls;

public class LabelStyleTests
{
    public LabelStyleTests()
    {
        // Initialize the application and its resources
        var app = new Application();
        Application.Current = app;

        // Add the necessary resources
        app.Resources = new ResourceDictionary
        {
            {
                "TestLabelStyle", new Style(typeof(Label))
                {
                    Setters =
                    {
                        new Setter { Property = Label.TextColorProperty, Value = Colors.Red },
                        new Setter { Property = Label.FontSizeProperty, Value = 24 }
                    }
                }
            }
        };
    }

    [Fact]
    public void Label_ShouldApplyTestLabelStyle()
    {
        // Arrange
        var label = new Label();
        label.Style = (Style)Application.Current.Resources["TestLabelStyle"];

        // Act & Assert
        Assert.Equal(Colors.Red, label.TextColor);
        Assert.Equal(24, label.FontSize);
    }

    [Fact]
    public void Label_ShouldApplyTestLabelStyle_UsingDynamicResource()
    {
        // Arrange
        var label = new Label();
        label.SetDynamicResource(Label.StyleProperty, "TestLabelStyle");

        // Act & Assert
        Assert.Equal(Colors.Red, label.TextColor);
        Assert.Equal(24, label.FontSize);
    }
}

======

using Xunit;
using Microsoft.Maui.Controls;

public class LabelStyleTests
{
    public LabelStyleTests()
    {
        // Initialize the application and its resources
        var app = new Application();
        Application.Current = app;

        // Add the necessary resources
        app.Resources = new ResourceDictionary
        {
            { "xunitColor", Colors.Red },
            { "xunitStyle", new Style(typeof(Label))
                {
                    Setters =
                    {
                        new Setter { Property = Label.TextColorProperty, Value = new StaticResourceExtension { Key = "xunitColor" } },
                        new Setter { Property = Label.FontSizeProperty, Value = 24 }
                    }
                }
            }
        };
    }

    [Fact]
    public void Label_ShouldApplyXunitStyle()
    {
        // Arrange
        var label = new Label();
        label.Style = (Style)Application.Current.Resources["xunitStyle"];

        // Act
        var textColor = label.TextColor;
        var fontSize = label.FontSize;

        // Assert
        Assert.Equal(Colors.Red, textColor);
        Assert.Equal(24, fontSize);
    }
}
